facet_wrap(~time)
data_in%>%
filter(!is.na(dist))%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~time)
View(data_in)
class(data_in$diff)
data_in%>%
ggpubr::ggdensity("dist")+
filter(time == "1")%>%
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in$time
data_in%>%
filter(time == 1)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
cor(data_in$dist~data_in$diff)
cor(data_in$dist,data_in$diff)
class(data_in$dist)
data_in$dist
data_in$diff
data_in%>%
filter(time == 2)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 3)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 4)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 4)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 3)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 2)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 1)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 2)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 3)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 3)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 4)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 4)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
data_in%>%
filter(time == 4)%>%
rstatix::cohens_d(dist~diff)
data_in%>%
filter(time == 3)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
library(pacman)
p_load(
tidyverse,
stringr,
psych,
rjson,
reticulate
)
data_in <- readxl::read_xlsx("output_distances.xlsx")
duplicates <- readxl::read_xlsx("duplicate_items.xlsx")
min_original_dist <- readxl::read_xlsx("distances_min_list.xlsx")
# duplicate frames & min distances berechnen
duplicates <- duplicates[,-1]
min_original_dist <- min_original_dist[,-1]
n_dupes <- colSums(duplicates,na.rm = TRUE)%>%unname()
describe(n_dupes)
# Vergleich
' vars  n mean   sd median trimmed  mad min max range skew kurtosis  se
X1    1 64  3.2 1.62      3    3.12 1.48   1   7     6 0.31    -0.96 0.2'
mean_min_dist <- apply(min_original_dist,FUN = mean,na.rm=TRUE,MARGIN = 2)%>%unname()
describe(mean_min_dist)
'   vars  n  mean   sd median trimmed  mad min   max range skew kurtosis   se
X1    1 64 20.67 3.48  20.28   20.51 3.28  13 29.53 16.53  0.4     0.18 0.44'
colnames(data_in) <- c("prompt","dist")
data_in <- data_in[1:80,]
data_in <- cbind(data_in,n_dupes=n_dupes,mean_min_dist=mean_min_dist)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
keepstrRight <- function(x, n){
substr(x, 1, nchar(x)-n)
}
post_fix <- data_in$prompt%>%substrRight(n = 1)%>%as.factor()
data_in <- data_in[1:80,]
data_in <- cbind(data_in,time= post_fix[1:80])
data_in$prompt <- data_in$prompt%>%
keepstrRight(n=2)
t_09 <- grepl(data_in$prompt,pattern='temperature_0.9')
t_14 <- grepl(data_in$prompt,pattern='temperature_1.4')
temp = rep(NA,80)
temp[t_09] <- "T9"
temp[t_14] <- "T14"
data_in <- cbind(data_in,temp=temp%>%as.factor())
diff = rep(NA,80)
diff_1 <- grepl(data_in$prompt,pattern='difficulty_1')
diff[diff_1] <- "1"
diff[!diff_1] <- "5"
data_in <- cbind(data_in,diff=as.factor(diff))
inverted = rep(NA,80)
inverted_t <- grepl(data_in$prompt,pattern='invert_TRUE')
inverted[inverted_t] <- "TRUE"
inverted[!inverted_t] <- "FALSE"
data_in <- cbind(data_in,inverted=as.factor(inverted))
data_in$prompt <- substr(data_in$prompt,1,8)
data_in%>%
group_by(time)%>%
filter(!is.na(dist))%>%
rstatix::get_summary_stats()
data_in%>%
filter(!is.na(dist))%>%
filter(prompt== "prompt_1")%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%filter(prompt== "prompt_1")%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%filter(prompt== "prompt_1")%>%pull(dist)),color="red")+
facet_wrap(~time)
data_in%>%
filter(!is.na(dist))%>%
filter(prompt== "prompt_2")%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%filter(prompt== "prompt_2")%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%filter(prompt== "prompt_2")%>%pull(dist)),color="red")+
facet_wrap(~time)
data_in%>%
filter(!is.na(mean_min_dist))%>%
ggpubr::ggdensity("mean_min_dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(mean_min_dist))%>%pull(mean_min_dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(mean_min_dist))%>%pull(mean_min_dist)),color="red")+
facet_wrap(~time)
data_in%>%
filter(!is.na(n_dupes))%>%
filter(prompt== "prompt_1")%>%
ggpubr::ggdensity("n_dupes")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(n_dupes))%>%filter(prompt=="prompt_1")%>%pull(n_dupes)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(n_dupes))%>%filter(prompt=="prompt_1")%>%pull(n_dupes)),color="red")+
facet_wrap(~time)
data_in%>%
filter(!is.na(n_dupes))%>%
filter(prompt== "prompt_2")%>%
ggpubr::ggdensity("n_dupes")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(n_dupes))%>%filter(prompt=="prompt_2")%>%pull(n_dupes)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(n_dupes))%>%filter(prompt=="prompt_2")%>%pull(n_dupes)),color="red")+
facet_wrap(~time)
data_in%>%
filter(!is.na(n_dupes))%>%
ggpubr::ggdensity("n_dupes")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(n_dupes))%>%pull(n_dupes)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(n_dupes))%>%pull(n_dupes)),color="red")+
facet_wrap(~time)
data_in%>%
filter(time == 1)%>%
ggpubr::ggdensity("dist")+
geom_vline(xintercept = mean(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="blue")+
geom_vline(xintercept = median(data_in%>%filter(!is.na(dist))%>%pull(dist)),color="red")+
facet_wrap(~diff)
library(lme4)
library(lmerTest)
model_dist <- lmer(dist ~ temp + diff + inverted + (1 | prompt) + time, data = data_in)
model_dist_lm <- lm(dist ~ temp + diff + inverted+ prompt + time, data = data_in)
summary(model_dist)
summary(model_dist_lm)
anova(model_dist)
model_n_dupes <- glmer(n_dupes ~  temp + diff + time + inverted + (1 | prompt), data = data_in,family="poisson")
model_n_dupes <- glmer(n_dupes ~  temp + diff + time + inverted + (1 | prompt), data = data_in,family="poisson")
model_n_dupes_glm <- glm(n_dupes ~  temp + diff + time + inverted + prompt, data = data_in,family="poisson")
summary(model_n_dupes)
summary(model_n_dupes_glm)
model_mean_min_dist <- lmer(mean_min_dist ~  temp + diff + inverted+ (1 | prompt) + time, data = data_in)
model_mean_min_dist_lm <- lm(mean_min_dist ~  temp + diff + inverted+ prompt + time, data = data_in)
summary(model_mean_min_dist)
summary(model_mean_min_dist_lm)
library(pacman)
p_load(
tidyverse,
stringr,
psych,
rjson,
reticulate
)
data_in <- readxl::read_xlsx("output_distances.xlsx")
duplicates <- readxl::read_xlsx("duplicate_items.xlsx")
min_original_dist <- readxl::read_xlsx("distances_min_list.xlsx")
#data_no_diff <- readxl::read_xlsx("output_distances_no_diff.xlsx")
#duplicates_no_diff <- readxl::read_xlsx("duplicate_items_no_diff.xlsx")
#min_original_dist_no_diff <- readxl::read_xlsx("distances_min_list_no_diff.xlsx")
pd <- import("pandas")
data <- pd$read_json("bundled_results.json")
data <- t(data)
data <- data%>%
as.data.frame(row.names = c("12","13","23"))
data_long <- data%>%
gather(key="time",value = "similarity",V1,V2,V3)
data_long$similarity <- data_long$similarity%>%
as.numeric()
data_long%>%
group_by(time)%>%
ggplot(aes(x=similarity))+
geom_density()+
facet_wrap(~time)+
papaja::theme_apa()
data_long%>%
group_by(time)%>%
rstatix::get_summary_stats()
# duplicate frames & min distances berechnen
duplicates <- duplicates[,-1]
#duplicates_no_diff <- duplicates_no_diff[,-1]
min_original_dist <- min_original_dist[,-1]
#min_original_dist_no_diff <- min_original_dist_no_diff[,-1]
n_dupes <- colSums(duplicates,na.rm = TRUE)%>%unname()
#n_dupes_no_diff <- colSums(duplicates_no_diff,na.rm = TRUE)%>%unname()
describe(n_dupes)
'   vars   n mean   sd median trimmed  mad min max range skew kurtosis   se
X1    1 180 1.25 1.06      1    1.15 1.48   0   5     5 0.66     0.02 0.08'
#describe(n_dupes_no_diff)
'   vars  n mean   sd median trimmed  mad min max range skew kurtosis   se
X1    1 20  0.7 0.66      1    0.62 0.74   0   2     2 0.34    -0.93 0.15'
mean_min_dist <- apply(min_original_dist,FUN = mean,na.rm=TRUE,MARGIN = 2)%>%unname()
#mean_min_dist_no_diff <- apply(min_original_dist_no_diff,FUN = mean,na.rm=TRUE,MARGIN = 2)%>%unname()
#t.test(mean_min_dist,mean_min_dist_no_diff,var.equal = FALSE)
describe(mean_min_dist)
#describe(mean_min_dist_no_diff)
colnames(data_in) <- c("prompt","dist")
#colnames(data_no_diff) <- c("prompt","dist")
data_in <- data_in[1:180,]
#data_no_diff <- data_in[1:20,]
data_in <- cbind(data_in,n_dupes=n_dupes,mean_min_dist=mean_min_dist)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
keepstrRight <- function(x, n){
substr(x, 1, nchar(x)-n)
}
post_fix <- data_in$prompt%>%substrRight(n = 1)%>%as.factor()
data_in <- data_in[1:180,]
data_in <- cbind(data_in,time= post_fix[1:180])
data_in$prompt <- data_in$prompt%>%
keepstrRight(n=2)
t_09 <- grepl(data_in$prompt,pattern='temperature_0.9')
t_13 <- grepl(data_in$prompt,pattern='temperature_1.3')
temp = rep(NA,180)
temp[t_09] <- "T9"
temp[t_13] <- "T13"
data_in <- cbind(data_in,temp=temp%>%as.factor())
diff = rep(NA,180)
diff_n <- grepl(data_in$prompt,pattern='difficulty_NA')
diff_1 <- grepl(data_in$prompt,pattern='difficulty_1')
diff[diff_n] <- "NA"
diff[diff_1] <- "1"
diff[!diff_1] <- "5"
data_in <- cbind(data_in,diff=as.factor(diff))
inverted = rep(NA,180)
inverted_t <- grepl(data_in$prompt,pattern='invert_TRUE')
inverted[inverted_t] <- "TRUE"
inverted[!inverted_t] <- "FALSE"
data_in <- cbind(data_in,inverted=as.factor(inverted))
data_in$prompt <- substr(data_in$prompt,1,8)
data_in%>%
group_by(time)%>%
rstatix::get_summary_stats()
aov_times <- data_in%>%
rstatix::anova_test(dv=dist,within = time,wid = prompt)
View(data)
View(data_in)
data_in$prompt
data_in%>%
filter(prompt="prompt_4")%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats(c("dist","n_dupes","mean_min_dist"))
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("mean_min_dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("n_dupes")
data_in%>%
filter(prompt=="prompt_4")%>%
group_by(time)%>%
rstatix::get_summary_stats("mean_min_dist")
library(pacman)
p_load(
tidyverse,
stringr,
psych,
rjson,
reticulate
)
data_in <- readxl::read_xlsx("output_distances.xlsx")
duplicates <- readxl::read_xlsx("duplicate_items.xlsx")
min_original_dist <- readxl::read_xlsx("distances_min_list.xlsx")
# duplicate frames & min distances berechnen
duplicates <- duplicates[,-1]
min_original_dist <- min_original_dist[,-1]
n_dupes <- colSums(duplicates,na.rm = TRUE)%>%unname()
describe(n_dupes)
# Vergleich
' vars  n mean   sd median trimmed  mad min max range skew kurtosis  se
X1    1 64  3.2 1.62      3    3.12 1.48   1   7     6 0.31    -0.96 0.2'
mean_min_dist <- apply(min_original_dist,FUN = mean,na.rm=TRUE,MARGIN = 2)%>%unname()
describe(mean_min_dist)
'   vars  n  mean   sd median trimmed  mad min   max range skew kurtosis   se
X1    1 64 20.67 3.48  20.28   20.51 3.28  13 29.53 16.53  0.4     0.18 0.44'
colnames(data_in) <- c("prompt","dist")
data_in <- data_in[1:80,]
data_in <- cbind(data_in,n_dupes=n_dupes,mean_min_dist=mean_min_dist)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
keepstrRight <- function(x, n){
substr(x, 1, nchar(x)-n)
}
post_fix <- data_in$prompt%>%substrRight(n = 1)%>%as.factor()
data_in <- data_in[1:80,]
data_in <- cbind(data_in,time= post_fix[1:80])
data_in$prompt <- data_in$prompt%>%
keepstrRight(n=2)
t_09 <- grepl(data_in$prompt,pattern='temperature_0.9')
t_14 <- grepl(data_in$prompt,pattern='temperature_1.4')
temp = rep(NA,80)
temp[t_09] <- "T9"
temp[t_14] <- "T14"
data_in <- cbind(data_in,temp=temp%>%as.factor())
diff = rep(NA,80)
diff_1 <- grepl(data_in$prompt,pattern='difficulty_1')
diff[diff_1] <- "1"
diff[!diff_1] <- "5"
data_in <- cbind(data_in,diff=as.factor(diff))
inverted = rep(NA,80)
inverted_t <- grepl(data_in$prompt,pattern='invert_TRUE')
inverted[inverted_t] <- "TRUE"
inverted[!inverted_t] <- "FALSE"
data_in <- cbind(data_in,inverted=as.factor(inverted))
data_in$prompt <- substr(data_in$prompt,1,8)
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("n_dupes")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("n_dupes")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("mean_min_dist")
library(pacman)
p_load(
tidyverse,
stringr,
psych,
rjson,
reticulate
)
library(pacman)
p_load(
tidyverse,
stringr,
psych,
rjson,
reticulate
)
data_in <- readxl::read_xlsx("output_distances.xlsx")
duplicates <- readxl::read_xlsx("duplicate_items.xlsx")
min_original_dist <- readxl::read_xlsx("distances_min_list.xlsx")
# duplicate frames & min distances berechnen
duplicates <- duplicates[,-1]
min_original_dist <- min_original_dist[,-1]
n_dupes <- colSums(duplicates,na.rm = TRUE)%>%unname()
describe(n_dupes)
# Vergleich
' vars  n mean   sd median trimmed  mad min max range skew kurtosis  se
X1    1 64  3.2 1.62      3    3.12 1.48   1   7     6 0.31    -0.96 0.2'
mean_min_dist <- apply(min_original_dist,FUN = mean,na.rm=TRUE,MARGIN = 2)%>%unname()
describe(mean_min_dist)
'   vars  n  mean   sd median trimmed  mad min   max range skew kurtosis   se
X1    1 64 20.67 3.48  20.28   20.51 3.28  13 29.53 16.53  0.4     0.18 0.44'
colnames(data_in) <- c("prompt","dist")
data_in <- data_in[1:80,]
data_in <- cbind(data_in,n_dupes=n_dupes,mean_min_dist=mean_min_dist)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
keepstrRight <- function(x, n){
substr(x, 1, nchar(x)-n)
}
post_fix <- data_in$prompt%>%substrRight(n = 1)%>%as.factor()
data_in <- data_in[1:80,]
data_in <- cbind(data_in,time= post_fix[1:80])
data_in$prompt <- data_in$prompt%>%
keepstrRight(n=2)
t_09 <- grepl(data_in$prompt,pattern='temperature_0.9')
t_14 <- grepl(data_in$prompt,pattern='temperature_1.4')
temp = rep(NA,80)
temp[t_09] <- "T9"
temp[t_14] <- "T14"
data_in <- cbind(data_in,temp=temp%>%as.factor())
diff = rep(NA,80)
diff_1 <- grepl(data_in$prompt,pattern='difficulty_1')
diff[diff_1] <- "1"
diff[!diff_1] <- "5"
data_in <- cbind(data_in,diff=as.factor(diff))
inverted = rep(NA,80)
inverted_t <- grepl(data_in$prompt,pattern='invert_TRUE')
inverted[inverted_t] <- "TRUE"
inverted[!inverted_t] <- "FALSE"
data_in <- cbind(data_in,inverted=as.factor(inverted))
data_in$prompt <- substr(data_in$prompt,1,8)
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("dist")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("n_dupes")
data_in%>%
filter(prompt=="prompt_2")%>%
group_by(time)%>%
rstatix::get_summary_stats("mean_min_dist")
model_mean_min_dist <- lmer(mean_min_dist ~  temp + diff + inverted+ (1 | prompt) + time, data = data_in)
library(lme4)
library(lme4)
library(lmerTest)
model_dist <- lmer(dist ~ temp + diff + inverted + (1 | prompt) + time, data = data_in)
summary(model_dist)
anova(model_dist)
model_n_dupes <- glmer(n_dupes ~  temp + diff + time + inverted + (1 | prompt), data = data_in,family="poisson")
summary(model_n_dupes_glm)
summary(model_n_dupes)
model_n_dupes_glm <- glm(n_dupes ~  temp + diff + time + inverted + prompt, data = data_in,family="poisson")
summary(model_n_dupes_glm)
summary(model_n_dupes)
model_mean_min_dist <- lmer(mean_min_dist ~  temp + diff + inverted+ (1 | prompt) + time, data = data_in)
summary(model_mean_min_dist)
anova(model_mean_min_dist)
